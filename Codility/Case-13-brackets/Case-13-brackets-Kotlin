var topIndex : Int = -1;
var stack : CharArray = charArrayOf() ;
var top : Char = '\u0000';

fun solution(S: String): Int{
    if(S.length==0)
        return 1;
    stack = S.toCharArray();
    for(a in S){
        if(isOpen(a)){
          if(push(a) == 0){ 
              return 0; }  
        }else{
          if(top != getOpening(a)){
              return 0; }
          else{ 
            if(pop()==0){ return 0; }
          }
        }
    }
    if(topIndex > -1){ return 0; }
    return 1;
}

fun getOpening(open: Char): Char{
    when (open) {
        ')' -> return '(';
        ']' -> return '[';
        '}' -> return '{';
        else -> { 
            return '\u0000';
        }
  }
}

fun push(elem: Char): Int{
    if(topIndex == stack.size)
      return 0;
    topIndex++;
    stack[topIndex] = elem;
    top = elem
    return 1;
}

fun pop(): Int{
    if(topIndex == -1)
      return 0;
    topIndex--;
    if(topIndex > -1)
      top = stack[topIndex];
    return 1;
}

fun isOpen(sym: Char): Boolean{
    when (sym) {
        '(' -> return true;
        '[' -> return true;
        '{' -> return true;
        else -> { 
            return false;
        }
  }
}